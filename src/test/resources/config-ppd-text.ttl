# Licensed under the terms of http://www.apache.org/licenses/LICENSE-2.0

## Epimorphics default Fuseki configuration


@base        <http://epimorphics.com/test/functional/ppd-text> .
@prefix :        <http://epimorphics.com/test/functional/ppd-text> .
@prefix fuseki:  <http://jena.apache.org/fuseki#> .
@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> .
@prefix tdb:     <http://jena.hpl.hp.com/2008/tdb#> .
@prefix ja:      <http://jena.hpl.hp.com/2005/11/Assembler#> .

[] rdf:type fuseki:Server ;
   # Timeout - server-wide default: milliseconds.
   # Format 1: "1000" -- 1 second timeout
   # Format 2: "10000,60000" -- 10s timeout to first result, then 60s timeout to for rest of query.
   # See java doc for ARQ.queryTimeout
     ja:context [ ja:cxtName "arq:queryTimeout" ;  ja:cxtValue "90000,120000" ] ;
   # ja:loadClass "your.code.Class" ;

   fuseki:services (
     <#service_ds>
   ) .

# TDB
[] ja:loadClass "com.hp.hpl.jena.tdb.TDB" .
tdb:DatasetTDB  rdfs:subClassOf  ja:RDFDataset .
tdb:GraphTDB    rdfs:subClassOf  ja:Model .



<#service_ds> rdf:type fuseki:Service ;
    rdfs:label                             "TDB Service (RW)" ;
    fuseki:name                            "landregistry" ;
    fuseki:serviceQuery                    "query" ;
    fuseki:serviceQuery                    "sparql" ;
    fuseki:serviceUpdate                   "update" ;
    fuseki:serviceUpload                   "upload" ;
    fuseki:serviceReadWriteGraphStore      "data" ;
    # A separate read-only graph store endpoint:
    fuseki:serviceReadGraphStore           "get" ;
    fuseki:dataset                         <#ds-with-lucene> ;
    .

<#ds> rdf:type      tdb:DatasetTDB ;
                      tdb:location   "target/tdb-testing" ;
##     # Default graph for query is the (read-only) union of all named graphs.
                      tdb:unionDefaultGraph true ;
     .


@prefix text:    <http://jena.apache.org/text#> .

## Initialize text query
[] ja:loadClass       "org.apache.jena.query.text.TextQuery" .
# A TextDataset is a regular dataset with a text index.
text:TextDataset      rdfs:subClassOf   ja:RDFDataset .
# Lucene index
text:TextIndexLucene  rdfs:subClassOf   text:TextIndex .
# Solr index
text:TextIndexSolr    rdfs:subClassOf   text:TextIndex .


<#ds-with-lucene> rdf:type     text:TextDataset;
    text:dataset   <#ds> ;
    text:index     <#indexLucene> ;
    text:docProducer "com.epimorphics.lr.jena.query.text.TextDocProducerBatch" ;
    .
<#indexLucene> a text:TextIndexLucene ;
    text:directory <file:target/tdb-testing-index>;
    text:entityMap <#entMap> ;
    .

# Mapping in the index
# URI stored in field "uri"
# rdfs:label is mapped to field "text"

#include prefixes used in the entity map
  @prefix def-hpi: <http://landregistry.data.gov.uk/def/hpi/> .
  @prefix def-common: <http://landregistry.data.gov.uk/def/common/> .
<#entMap> a text:EntityMap ;
    text:entityField      "uri" ;
    text:defaultField     "text" ;
    text:map (
         [
           text:field "text" ;
           text:predicate rdfs:label ;
           text:analyzer [
             a text:StandardAnalyzer ;
               text:stopWords ( ) ;
           ]
         ]
         [
           text:field "refRegion" ;
           text:predicate def-hpi:refRegionName ;
           text:analyzer [
             a text:StandardAnalyzer ;
               text:stopWords ( ) ;
           ]
         ]
         [
           text:field "paon" ;
           text:predicate def-common:paon ;
           text:analyzer [
             a text:StandardAnalyzer ;
               text:stopWords ( ) ;
           ]
         ]
         [
           text:field "saon" ;
           text:predicate def-common:saon ;
           text:analyzer [
             a text:StandardAnalyzer ;
               text:stopWords ( ) ;
           ]
         ]
         [
           text:field "locality" ;
           text:predicate def-common:locality ;
           text:analyzer [
             a text:StandardAnalyzer ;
               text:stopWords ( ) ;
           ]
         ]
         [
           text:field "street" ;
           text:predicate def-common:street ;
           text:analyzer [
             a text:StandardAnalyzer ;
               text:stopWords ( ) ;
           ]
         ]
         [
           text:field "town" ;
           text:predicate def-common:town ;
           text:analyzer [
             a text:StandardAnalyzer ;
               text:stopWords ( ) ;
           ]
         ]
         [
           text:field "county" ;
           text:predicate def-common:county ;
           text:analyzer [
             a text:StandardAnalyzer ;
               text:stopWords ( ) ;
           ]
         ]
         [
           text:field "district" ;
           text:predicate def-common:district ;
           text:analyzer [
             a text:StandardAnalyzer ;
               text:stopWords ( ) ;
           ]
         ]
         [
           text:field "postcode" ;
           text:predicate def-common:postcode ;
           text:analyzer [
             a text:StandardAnalyzer ;
               text:stopWords ( ) ;
           ]
         ]
         ) .

